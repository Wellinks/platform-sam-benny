version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      - echo "Updating system packages..."
      - yum update -y
      - echo "Installing dependencies..."
      - yum install -y unzip tar gzip

      - echo "Checking and Updating AWS CLI..."
      - if aws --version; then 
          echo "AWS CLI already installed. Updating..."; 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip";
          unzip -q awscliv2.zip;
          sudo ./aws/install --update;
          rm -rf awscliv2.zip aws;
        else 
          echo "AWS CLI not found. Installing...";
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip";
          unzip -q awscliv2.zip;
          sudo ./aws/install;
          rm -rf awscliv2.zip aws;
        fi

      - echo "Checking and Updating AWS SAM CLI..."
      - if sam --version; then 
          echo "SAM CLI already installed. Updating..."; 
          curl -Lo aws-sam-cli-linux-x86_64.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip;
          unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation;
          sudo ./sam-installation/install;
          rm -rf aws-sam-cli-linux-x86_64.zip sam-installation;
        else 
          echo "SAM CLI not found. Installing...";
          curl -Lo aws-sam-cli-linux-x86_64.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip;
          unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation;
          sudo ./sam-installation/install;
          rm -rf aws-sam-cli-linux-x86_64.zip sam-installation;
        fi

      - export PATH=$PATH:/usr/local/bin

  pre_build:
    commands:
      - echo "Verifying AWS CLI and SAM CLI installation..."
      - aws --version
      - sam --version
      - echo "AWS CLI and SAM CLI are configured successfully."
      - echo "Using environment:$ENVIRONMENT"

  build:
    commands:
      - echo "Deploying first phase (without Lambda permissions)..."
      - sam build
      - sam deploy --config-env $ENVIRONMENT --parameter-overrides Environment=$ENVIRONMENT AuthId=NONE --no-fail-on-empty-changeset 

      - echo "Waiting for API Gateway creation..."
      - sleep 60 

      - echo "Fetching API Gateway ID..."
      - |
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='wellinksauth-$ENVIRONMENT-api'].id" --output text)
        echo "API Gateway ID: $API_ID"
        echo "API_ID=$API_ID" >> /tmp/env_variables.sh  # Save API ID for later use

      - echo "Fetching Authorizer IDs..."
      - |
        AUTH_ID=$(aws apigateway get-authorizers --rest-api-id $API_ID --query "items[?name=='WellinksLambdaAuthorizer'].id" --output text)
        MOBILE_AUTH_ID=$(aws apigateway get-authorizers --rest-api-id $API_ID --query "items[?name=='WellinksLambdaMobileAuthorizer'].id" --output text)
        VALIDATION_AUTH_ID=$(aws apigateway get-authorizers --rest-api-id $API_ID --query "items[?name=='WellinksLambdaValidationAuthorizer'].id" --output text)
        
        echo "Authorizer IDs: $AUTH_ID, $MOBILE_AUTH_ID, $VALIDATION_AUTH_ID"
        echo "AUTH_ID=$AUTH_ID" >> /tmp/env_variables.sh
        echo "MOBILE_AUTH_ID=$MOBILE_AUTH_ID" >> /tmp/env_variables.sh
        echo "VALIDATION_AUTH_ID=$VALIDATION_AUTH_ID" >> /tmp/env_variables.sh

      - echo "Deploying Lambda permission with dynamic Authorizer IDs..."
      - source /tmp/env_variables.sh 
      - sam deploy --config-env $ENVIRONMENT --parameter-overrides Environment=$ENVIRONMENT AuthId=$AUTH_ID MobileAuthId=$MOBILE_AUTH_ID ValidationAuthId=$VALIDATION_AUTH_ID


  post_build:
    commands:
      - echo "Build completed on $(date)"

      # Determine Build Status
      - echo "Checking build status..."
      - BUILD_STATUS="❌ Build Failed"
      - if [ $? -eq 0 ]; then BUILD_STATUS="✅ Build Succeeded"; fi
      - echo "Build Status:$BUILD_STATUS"

      # Get Branch Name (Fix Empty Branch Issue)
      - BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD || echo "unknown")
      - echo "Branch Name: $BRANCH_NAME"

      # Construct Teams Message JSON
      - echo "Generating Teams Message JSON..."
      - |
        cat <<EOF > teams_message.json
        {
          "summary": "Build Notification",
          "text": "$BUILD_STATUS",
          "attachments": [
            {
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "type": "AdaptiveCard",
                "version": "1.0",
                "msteams": { "width": "Full" },
                "body": [
                  {
                    "type": "Container",
                    "items": [
                      {
                        "type": "TextBlock",
                        "text": "$BUILD_STATUS",
                        "weight": "bolder",
                        "size": "medium"
                      }
                    ]
                  },
                  {
                    "type": "FactSet",
                    "facts": [
                      { "title": "Branch", "value": "$BRANCH_NAME" },
                      { "title": "Environment", "value": "$ENVIRONMENT" }
                    ]
                  }
                ]
              }
            }
          ]
        }
        EOF

      # Log JSON message before sending
      - echo "Generated Teams Message:"
      - cat teams_message.json

      # Send message to Teams and log the response
      - echo "Sending Teams Notification..."
      - curl -X POST "https://convexityscientific.webhook.office.com/webhookb2/15efd2d6-d4ab-4f9b-813f-730e6b1b81f1@95f9de66-de17-46bf-a258-42a607447a48/IncomingWebhook/41f6bb49a5074526b81691e429162f86/81d4e23b-c2f3-4676-8d92-166fab321107/V2BKZoMkcSUdJuTm4vLAOjzKKr0bK3kcW1NgnWSF6POLI1" -H "Content-Type:application/json" --data "@teams_message.json"


      # Capture exit status of curl
      - RESPONSE=$?
      - if [ $RESPONSE -ne 0 ]; then
          echo "❌ Teams notification failed!";
        else
          echo "✅ Teams notification sent successfully!";
        fi


artifacts:
  files:
    - '**/*'
