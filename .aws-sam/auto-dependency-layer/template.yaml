AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  WellinksAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: wellinksauthdevfunctiontest
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: WellinksAuthLambdaFunction
      MemorySize: 128
      Timeout: 5
      Policies:
      - AWSLambdaBasicExecutionRole
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.WellinksAuthLambdaFunction89add5b0DepLayer
    Metadata:
      SamResourceId: WellinksAuthLambdaFunction
  WellinksApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: wellinkauthdevapitest
      StageName: dev
      Auth:
        DefaultAuthorizer: WellinksLambdaAuthorizer
        Authorizers:
          WellinksLambdaAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - WellinksAuthLambdaFunction
              - Arn
            Identity:
              Header: authorizationtoken
              ReauthorizeEvery: 0
      Variables:
        appointment: api-appointment.development.wellinks.com
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Wellinks API Gateway
        paths:
          /appointment:
            x-amazon-apigateway-any-method:
              security:
              - WellinksLambdaAuthorizer: []
              parameters:
              - name: useremail
                in: header
                required: true
                type: string
              - name: userid
                in: header
                required: true
                type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: HTTP_PROXY
                uri: https://${stageVariables.appointment}/appointment
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                requestParameters:
                  integration.request.header.useremail: context.authorizer.useremail
                  integration.request.header.userid: context.authorizer.userid
            options:
              summary: CORS preflight support
              description: Handles preflight OPTIONS requests
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: CORS response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\n  \"statusCode\": 200\n}\n"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,
                        POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,useremail,userid'''
                    responseTemplates:
                      application/json: '{}'
          /appointment/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
              - WellinksLambdaAuthorizer: []
              parameters:
              - name: useremail
                in: header
                required: true
                type: string
              - name: userid
                in: header
                required: true
                type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: HTTP_PROXY
                uri: https://${stageVariables.appointment}/appointment/{proxy}
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                requestParameters:
                  integration.request.header.useremail: context.authorizer.useremail
                  integration.request.header.userid: context.authorizer.userid
            options:
              summary: CORS preflight support
              description: Handles preflight OPTIONS requests for proxy
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: CORS response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\n  \"statusCode\": 200\n}\n"
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,
                        POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,useremail,userid'''
                    responseTemplates:
                      application/json: '{}'
  WellinksApiGatewayAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: WellinksAuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:302fzip1aa/authorizers/a207ce
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: C:\Users\gaura\Desktop\wellinks\platform-sam-benny\.aws-sam\auto-dependency-layer\adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
