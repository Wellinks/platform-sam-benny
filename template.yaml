AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31  # Using AWS SAM for easier deployment

Parameters:
  AuthId:
    Type: String
    Description: "The API Gateway Authorizer ID"
    Default: "NONE"

Conditions:
  HasAuthId: !Not [!Equals [!Ref AuthId, "NONE"]]

    
Resources:
  # Lambda function for API Gateway Authorization
  WellinksAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: wellinksauthdevfunctiontest
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ./lambda
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole

  # API Gateway definition
  WellinksApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: wellinkauthdevapitest
      StageName: dev
      Auth:
        DefaultAuthorizer: WellinksLambdaAuthorizer
        Authorizers:
          WellinksLambdaAuthorizer:
            FunctionArn: !GetAtt WellinksAuthLambdaFunction.Arn
            Identity:
              Header: authorizationtoken
              ReauthorizeEvery: 0
      Variables:  # Ensure stage variables are defined within the API resource itself
        appointment: "api-appointment.development.wellinks.com"
        clinicalforms: "a97f6572c7ade4e178b45a2b3db0efc2-832e214b1805771a.elb.us-east-1.amazonaws.com"
        commonutil: "a8fb1a279ed014a3cbc77ff0b1997e30-528798d80a8fdd16.elb.us-east-1.amazonaws.com"
        communication: "api-communication.development.wellinks.com"
        grid: "k8s-expgrida-myapiser-fe1d9aa6ef-d907b26755e6f9da.elb.us-east-1.amazonaws.com"
        patient: "a7964d2c7866e40ca8a7790a156354dc-9e44a05b631bfcd9.elb.us-east-1.amazonaws.com"
        pgi: "ac771c72acf4348b591373a052bde4fb-7784491e69f07fa3.elb.us-east-1.amazonaws.com"
        report: "k8s-exprepor-myapiser-233515171d-06def96de6a3b872.elb.us-east-1.amazonaws.com"
        task: "aeabed2e09776412da295807190c6fe8-2dfe590dc6d7ef56.elb.us-east-1.amazonaws.com"
        users: "ac44be2c2f990415e8f916180dc04fb2-4604f126536b2ea5.elb.us-east-1.amazonaws.com"

      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Wellinks API Gateway"
        paths:
          /appointment:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"
          /appointment/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"
          /care-plan:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/care-plan"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /care-plan/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/care-plan/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /clinical-alerts:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/clinical-alerts"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /clinical-alerts/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/clinical-alerts/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /clinical-forms:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.clinicalforms}/clinical-forms"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /clinical-forms/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.clinicalforms}/clinical-forms/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /communication:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.communication}/communication"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /communication/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.communication}/communication/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /contact-type:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/contact-type"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /contact-type/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/contact-type/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

  # Force API Gateway to only invoke Lambda for `authorizers/s752iu`
  WellinksApiGatewayAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Condition: HasAuthId
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WellinksAuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WellinksApiGateway}/authorizers/${AuthId}"