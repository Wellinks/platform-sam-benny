AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31  # Using AWS SAM for easier deployment

Parameters:
  Environment:
    Type: String
    Description: "The environment name (dev, staging, prod)"
  AuthId:
    Type: String
    Description: "The API Gateway Authorizer ID"
    Default: "NONE"

  MobileAuthId:
    Type: String
    Description: "The API Gateway Authorizer ID for WellinksLambdaMobileAuthorizer"
    Default: "NONE"

  ValidationAuthId:
    Type: String
    Description: "The API Gateway Authorizer ID for WellinksLambdaValidationAuthorizer"
    Default: "NONE"

Mappings:
  EnvironmentConfig:
    dev:
      ApiName: "wellinksauth-dev-api"
      StageName: "dev"
      FunctionSuffix: "-dev-function"
      CodeUriAuth: "./authorizers/dev/lambdaAuth"
      CodeUriMobileAuth: "./authorizers/dev/lambdaMobileAuth"
      CodeUriValidation: "./authorizers/dev/lambdaValidation"
      AppointmentURL: "api-appointment.development.wellinks.com"
      ClinicalFormsURL: "a97f6572c7ade4e178b45a2b3db0efc2-832e214b1805771a.elb.us-east-1.amazonaws.com"
      CommonUtilURL: "a8fb1a279ed014a3cbc77ff0b1997e30-528798d80a8fdd16.elb.us-east-1.amazonaws.com"
      CommunicationURL: "k8s-expgrida-myapiser-fe1d9aa6ef-d907b26755e6f9da.elb.us-east-1.amazonaws.com"
      GridURL: "k8s-expgrida-myapiser-fe1d9aa6ef-d907b26755e6f9da.elb.us-east-1.amazonaws.com"
      PatientURL: "a7964d2c7866e40ca8a7790a156354dc-9e44a05b631bfcd9.elb.us-east-1.amazonaws.com"
      PGIURL: "ac771c72acf4348b591373a052bde4fb-7784491e69f07fa3.elb.us-east-1.amazonaws.com"
      ReportURL: "k8s-exprepor-myapiser-233515171d-06def96de6a3b872.elb.us-east-1.amazonaws.com"
      TaskURL: "aeabed2e09776412da295807190c6fe8-2dfe590dc6d7ef56.elb.us-east-1.amazonaws.com"
      UsersURL: "ac44be2c2f990415e8f916180dc04fb2-4604f126536b2ea5.elb.us-east-1.amazonaws.com"
      AuthId: "AUTH_DEV_ID"

    staging:
      ApiName: "wellinksauth-staging-api"
      StageName: "staging"
      FunctionSuffix: "-staging-function"
      CodeUriAuth: "./authorizers/staging/lambdaAuth"
      CodeUriMobileAuth: "./authorizers/staging/lambdaMobileAuth"
      CodeUriValidation: "./authorizers/staging/lambdaValidation"
      AppointmentURL: "api-appointment.staging.wellinks.com"
      ClinicalFormsURL: "staging-clinicalforms.com"
      CommonUtilURL: "staging-commonutil.com"
      CommunicationURL: "api-communication.staging.wellinks.com"
      GridURL: "staging-grid.com"
      PatientURL: "staging-patient.com"
      PGIURL: "staging-pgi.com"
      ReportURL: "staging-report.com"
      TaskURL: "staging-task.com"
      UsersURL: "staging-users.com"
      AuthId: "AUTH_STAGING_ID"

    prod:
      ApiName: "wellinksauth-prod-api"
      StageName: "prod"
      FunctionSuffix: "-prod-function"
      CodeUriAuth: "./authorizers/prod/lambdaAuth"
      CodeUriMobileAuth: "./authorizers/prod/lambdaMobileAuth"
      CodeUriValidation: "./authorizers/prod/lambdaValidation"
      AppointmentURL: "api-appointment.prod.wellinks.com"
      ClinicalFormsURL: "prod-clinicalforms.com"
      CommonUtilURL: "prod-commonutil.com"
      CommunicationURL: "api-communication.prod.wellinks.com"
      GridURL: "prod-grid.com"
      PatientURL: "prod-patient.com"
      PGIURL: "prod-pgi.com"
      ReportURL: "prod-report.com"
      TaskURL: "prod-task.com"
      UsersURL: "prod-users.com"
      AuthId: "AUTH_PROD_ID"

Conditions:
  HasAuthId: !Not [!Equals [!Ref AuthId, "NONE"]]
  HasMobileAuthId: !Not [!Equals [!Ref MobileAuthId, "NONE"]]
  HasValidationAuthId: !Not [!Equals [!Ref ValidationAuthId, "NONE"]]
    
Resources:
  # Lambda function for API Gateway Authorization
  WellinksAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "wellinksauth${!FindInMap [EnvironmentConfig, !Ref Environment, FunctionSuffix]}"
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: !FindInMap [EnvironmentConfig, !Ref Environment, CodeUriAuth]
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
  WellinksMobileAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "wellinksauthmobile${!FindInMap [EnvironmentConfig, !Ref Environment, FunctionSuffix]}"
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: !FindInMap [EnvironmentConfig, !Ref Environment, CodeUriMobileAuth]
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
  WellinksValidationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "wellinksvalidation${!FindInMap [EnvironmentConfig, !Ref Environment, FunctionSuffix]}"
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: !FindInMap [EnvironmentConfig, !Ref Environment, CodeUriValidation]
      MemorySize: 128
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole

  # API Gateway definition
  WellinksApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !FindInMap [EnvironmentConfig, !Ref Environment, ApiName]
      StageName: !FindInMap [EnvironmentConfig, !Ref Environment, StageName]
      Auth:
        DefaultAuthorizer: WellinksLambdaAuthorizer
        Authorizers:
          WellinksLambdaAuthorizer:
            FunctionArn: !GetAtt WellinksAuthLambdaFunction.Arn
            Identity:
              Header: authorizationtoken
              ReauthorizeEvery: 0
          WellinksLambdaMobileAuthorizer:
            FunctionArn: !GetAtt WellinksMobileAuthLambdaFunction.Arn
            Identity:
              Header: authorizationtoken
              ReauthorizeEvery: 0
          WellinksLambdaValidationAuthorizer:
            FunctionArn: !GetAtt WellinksValidationLambdaFunction.Arn
            Identity:
              Headers:
                - Header
              ReauthorizeEvery: 0
      Variables: 
        appointment: !FindInMap [EnvironmentConfig, !Ref Environment, AppointmentURL]
        clinicalforms: !FindInMap [EnvironmentConfig, !Ref Environment, ClinicalFormsURL]
        commonutil: !FindInMap [EnvironmentConfig, !Ref Environment, CommonUtilURL]
        communication: !FindInMap [EnvironmentConfig, !Ref Environment, CommunicationURL]
        grid: !FindInMap [EnvironmentConfig, !Ref Environment, GridURL]
        patient: !FindInMap [EnvironmentConfig, !Ref Environment, PatientURL]
        pgi: !FindInMap [EnvironmentConfig, !Ref Environment, PGIURL]
        report: !FindInMap [EnvironmentConfig, !Ref Environment, ReportURL]
        task: !FindInMap [EnvironmentConfig, !Ref Environment, TaskURL]
        users: !FindInMap [EnvironmentConfig, !Ref Environment, UsersURL]

      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Wellinks API Gateway"
        paths:
          get:
            summary: "Root GET"
            description: "Handles GET requests to the root path"
            responses:
              "200":
                description: "Successful response"
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
            x-amazon-apigateway-integration:
              type: "mock"
              requestTemplates:
                application/json: |
                  {
                    "statusCode": 200
                  }
              responses:
                default:
                  statusCode: "200"
                  responseTemplates:
                    application/json: |
                      {
                        "message": "Welcome to Wellinks API Gateway"
                      }
          /appointment:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"
          /appointment/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"
          /care-plan:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/care-plan"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /care-plan/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/care-plan/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /clinical-alerts:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/clinical-alerts"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /clinical-alerts/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/clinical-alerts/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /clinical-forms:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.clinicalforms}/clinical-forms"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /clinical-forms/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.clinicalforms}/clinical-forms/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /communication:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaValidationAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.communication}/communication"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /communication/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaValidationAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.communication}/communication/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /contact-type:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/contact-type"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /contact-type/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/contact-type/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /eligibles:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/eligibles"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /eligibles/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/eligibles/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /grid: {}
          /grid/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.grid}/grid/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /icd-codes:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/icd-codes"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /icd-codes/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/icd-codes/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /location:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/location"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /location/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/location/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /lookup:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/lookup"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /lookup/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/lookup/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /medication:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/medication"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /medication/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/medication/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /mobile: {}
          /mobile/patient: {}
          /mobile/patient/appointments:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/mobile/patient/appointments"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /mobile/patient/appointments/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/mobile/patient/appointments/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /mobile/patient/metric-groups:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/mobile/patient/metric-groups"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /mobile/patient/metric-groups/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/mobile/patient/metric-groups/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /mobile/patient/metrics:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/mobile/patient/metrics"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /mobile/patient/metrics/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaMobileAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/mobile/patient/metrics/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /partner:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/partner"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /partner/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/partner/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /patient-notifications:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/patient-notifications"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /patient-notifications/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/patient-notifications/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /patients:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/patients"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /patients/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.patient}/patients/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /peripheral-devices:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/peripheral-devices"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /peripheral-devices/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/peripheral-devices/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /pgis: {}
          /pgis/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.pgi}/pgis/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /providers:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.users}/providers"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /providers/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.users}/providers/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /reports:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.report}/reports"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /reports/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.report}/reports/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /tasks:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.task}/tasks"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /tasks/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.task}/tasks/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /user-notifications:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/user-notifications"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /user-notifications/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/user-notifications/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /users:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.users}/users"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /users/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.users}/users/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"
          /workflows:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/workflows"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

          /workflows/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.commonutil}/workflows/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,userid'"
                    responseTemplates:
                      application/json: "{}"

  # Force API Gateway to only invoke Lambda for `authorizers/s752iu`
  WellinksApiGatewayAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Condition: HasAuthId
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WellinksAuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WellinksApiGateway}/authorizers/${AuthId}"

  WellinksApiGatewayMobileAuthPermission:
    Type: AWS::Lambda::Permission
    Condition: HasMobileAuthId
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WellinksMobileAuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WellinksApiGateway}/authorizers/${MobileAuthId}"

  WellinksApiGatewayValidationAuthPermission:
    Type: AWS::Lambda::Permission
    Condition: HasValidationAuthId
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WellinksValidationLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WellinksApiGateway}/authorizers/${ValidationAuthId}"