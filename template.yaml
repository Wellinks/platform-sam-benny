AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31  # Using AWS SAM for easier deployment

Parameters:
  StackName:
    Type: String
    Default: "lambda-authorizer-dev-test"
  S3Bucket:
    Type: String
    Default: "wellink-sam-auth-dev-test"
  LambdaTimeout:
    Type: String
    Default: "5"

Resources:
  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudFormationPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*"

        - PolicyName: S3Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"

        - PolicyName: IAMPassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  WellinksAuthLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: wellinksauthdevfunctiontest
      Runtime: nodejs22.x
      Handler: index.handler
      CodeUri: ./lambda
      MemorySize: 128
      Timeout: !Ref LambdaTimeout
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WellinksApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: wellinkauthdevapitest
      StageName: dev
      Auth:
        DefaultAuthorizer: WellinksLambdaAuthorizer
        Authorizers:
          WellinksLambdaAuthorizer:
            FunctionArn: !GetAtt WellinksAuthLambdaFunction.Arn
            Identity:
              Header: authorizationtoken
              ReauthorizeEvery: 0
      Variables:
        appointment: "api-appointment.development.wellinks.com"
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Wellinks API Gateway"
        paths:
          /appointment:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"

          /appointment/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - WellinksLambdaAuthorizer: []
              parameters:
                - name: useremail
                  in: header
                  required: true
                  type: string
                - name: userid
                  in: header
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                type: "HTTP_PROXY"
                uri: "https://${stageVariables.appointment}/appointment/{proxy}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.header.useremail: "context.authorizer.useremail"
                  integration.request.header.userid: "context.authorizer.userid"

            options:
              summary: "CORS preflight support"
              description: "Handles preflight OPTIONS requests for proxy"
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "CORS response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,useremail,userid'"
                    responseTemplates:
                      application/json: "{}"

  WellinksApiGatewayAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WellinksAuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:302fzip1aa/authorizers/a207ce"
